#region header
// MangaCLI.Net : A Featureful Manga Downloader
// Copyright (C)  2024 canadian
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
#endregion

using System.Net.Http.Json;
using System.Text.Json.Serialization;
using AniListNet.Objects;

namespace MangaCLI.Net.Manga.ComicK.Models;


public class ComickChapter: IChapter
{
    #pragma warning disable CS8618
    [JsonPropertyName("title")]
    public string? Title { get; set; }
    
    [JsonPropertyName("hid")]
    public string Identifier { get; init; }
    
    [JsonPropertyName("chap")]
    public string? ChapterIndex { get; init; }
    
    [JsonPropertyName("vol")]
    public string? VolumeIndex { get; set; }

    [JsonPropertyName("group_name")]
    public string[]? GroupName { get; set; }
    
    [JsonPropertyName("lang")]
    public string Language { get; init; }
    
    [JsonIgnore]
    public ComickComic Owner { get; set; }
    
    [JsonPropertyName("up_count")]
    public int UpvoteCount { get; init; }
    [JsonPropertyName("down_count")]
    public int DownvoteCount { get; init; }

    [JsonIgnore] public int PageCount => Pages?.Length ?? 0;
    
    [JsonIgnore]
    private IPage[]? Pages { get; set; }
    #pragma warning restore CS8618

    IPage[] IChapter.GetPages() => GetPages();

    private IPage[] GetPages()
    {
        // ReSharper disable once CoVariantArrayConversion
        return Pages ??= MangaCli.Connector.GetClient().GetFromJsonAsync(
            ComickConnector.BaseApiUrl.Combine($"/chapter/{Identifier}?tachiyomi=true"),
            ComickJsonContext.Default.ComickChapterWrapper).GetAwaiter().GetResult()?.Chapter.Pages ?? [];
    }
    
    public MetadataComicRack GetComicRackMetadata()
    {
        if (Pages == null)
            GetPages();

        MetadataComicRack.ComicPageInfo[] pages = new MetadataComicRack.ComicPageInfo[PageCount];
        
        for (int i = 0; i < PageCount; i++)
        {
            pages[i] = new MetadataComicRack.ComicPageInfo()
            {
                Image = i + 1,
                Type = MetadataComicRack.ComicPageType.Story,
                DoublePage = Pages![i].Width > Pages[i].Height,
                ImageSize = 0,
                ImageWidth = Pages[i].Width,
                ImageHeight = Pages[i].Height
            };
        }

        if (!int.TryParse(VolumeIndex, out var volumeIndex))
            volumeIndex = -1;
        
        return new MetadataComicRack
        {
            Title = Title ?? "",
            Series = Owner.ComicInfo.Title,
            Number = ChapterIndex ?? "0",
            Count = (int)MathF.Floor(Owner.ComicInfo.TotalChapters),
            Volume = volumeIndex != -1 ? volumeIndex : null,
            Summary = "", //TODO: Find a metadata provider with per-chapter metadata
            Notes = "Generated by MangaCLI.Net",
            Year = Owner.ComicInfo.Year,
            Month = Owner.ComicInfo.Month,
            Day = Owner.ComicInfo.Day,
            Writer = String.Join(',', Owner.AnilistStaff?.Data.Where(edge => edge.Role.Contains("write", StringComparison.InvariantCultureIgnoreCase) || edge.Role.Contains("story", StringComparison.InvariantCultureIgnoreCase) || edge.Role.Contains("author", StringComparison.InvariantCultureIgnoreCase)).Select(edge => edge.Staff.Name.FullName) ?? Owner.ComicInfo.Authors),
            Penciller = String.Join(',', Owner.AnilistStaff?.Data.Where(edge => edge.Role.Contains("pencil", StringComparison.InvariantCultureIgnoreCase) || edge.Role.Contains("art", StringComparison.InvariantCultureIgnoreCase)).Select(edge => edge.Staff.Name.FullName) ?? Owner.ComicInfo.Artists),
            Inker = String.Join(',', Owner.AnilistStaff?.Data.Where(edge => edge.Role.Contains("ink", StringComparison.InvariantCultureIgnoreCase) || edge.Role.Contains("black", StringComparison.InvariantCultureIgnoreCase)).Select(edge => edge.Staff.Name.FullName) ?? Array.Empty<string>()),
            Colorist = String.Join(',', Owner.AnilistStaff?.Data.Where(edge => edge.Role.Contains("color", StringComparison.InvariantCultureIgnoreCase) || edge.Role.Contains("colour", StringComparison.InvariantCultureIgnoreCase)).Select(edge => edge.Staff.Name.FullName) ?? Array.Empty<string>()),
            Letterer = String.Join(',', Owner.AnilistStaff?.Data.Where(edge => edge.Role.Contains("letter", StringComparison.InvariantCultureIgnoreCase)).Select(edge => edge.Staff.Name.FullName) ?? Array.Empty<string>()),
            CoverArtist = String.Join(',', Owner.AnilistStaff?.Data.Where(edge => edge.Role.Contains("cover", StringComparison.InvariantCultureIgnoreCase)).Select(edge => edge.Staff.Name.FullName) ?? Array.Empty<string>()),
            Editor = String.Join(',', Owner.AnilistStaff?.Data.Where(edge => edge.Role.Contains("edit", StringComparison.InvariantCultureIgnoreCase)).Select(edge => edge.Staff.Name.FullName) ?? Array.Empty<string>()),
            Publisher = string.Join(',', Owner.ComicInfo.Publishers),
            Genre = string.Join(',', Owner.ComicInfo.Genres),
            Tags = string.Join(',', Owner.ComicInfo.Tags),
            Web = Owner.ComicInfo.Links?.Select(link =>
                    {
                        switch (link.Key)
                        {
                            case "al":
                                return $"https://anilist.co/manga/{link.Value}";
                            case "mal":
                                return $"https://myanimelist.net/manga/{link.Value}";
                            case "mu":
                                return $"https://www.mangaupdates.com/series.html?id={link.Value}";
                            case "ap":
                                return $"https://www.anime-planet.com/manga/{link.Value}";
                            case "bw":
                                return $"https://bookwalker.jp/{link.Value}";
                            case "amz": case "raw": case "engtl": case "ebj":
                                return link.Value;
                        }
                        return string.Empty;
                    }).First() ?? string.Empty
            ,
            PageCount = PageCount,
            LanguageISO = Language,
            Format = "Digital",
            BlackAndWhite = Owner.ComicInfo.Genres.Any(genre => genre.ToLower() is "colored" or "coloured") ? MetadataComicRack.YesNoType.Yes : MetadataComicRack.YesNoType.No,
            Manga = MetadataComicRack.MangaType.YesAndRightToLeft,
            Characters = string.Join(',', Owner.AnilistCharacters?.Data.Where(character => character.Role == CharacterRole.Main).Select(character => character.Character.Name.FullName) ?? []), //TODO: Find a metadata provider with per-chapter metadata
            Teams = "", //TODO: Find a metadata provider with per-chapter metadata
            Locations = "", //TODO: Find a metadata provider with per-chapter metadata
            ScanInformation = $"Translated by: {GroupName?.First() ?? "UNKNOWN"}",
            StoryArc = "", //TODO: Find a metadata provider with per-chapter metadata
            SeriesGroup = "", //TODO: Find a metadata provider with per-chapter metadata
            AgeRating = Owner.ComicInfo.AgeRating,
            CommunityRating = UpvoteCount + DownvoteCount != 0 ? MathF.Round(UpvoteCount/((float)UpvoteCount + DownvoteCount)*5f, 2) : 0f,
            MainCharacterOrTeam = Owner.AnilistCharacters?.Data.First(character => character.Role == CharacterRole.Main).Character.Name.FullName ?? string.Empty, //TODO: Find a metadata provider with per-chapter metadata
            Review = Owner.AnilistReviews?.Data.First().Summary ?? "", //TODO: Find a metadata provider with per-chapter metadata
            Pages = pages
        };
    }
}

